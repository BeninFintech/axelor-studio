ext {
    webServicesBuilderRootPath = "react-components/webservices-builder"
    webServicesBuilderBuildPath = "${webServicesBuilderRootPath}/build"
}

task npmWebServicesBuilderInstall(type: NpmTask) {
    group = 'com.axelor.addons'
    description = 'Install dependencies'
    workingDir = file("${webServicesBuilderRootPath}")

    args = ['install', '-f']
}

task npmWebServicesBuilderBuild(type: NpmTask) {
    group = 'com.axelor.addons'
    description = 'Build App'
    environment = [
            CI: 'false'
    ]
    workingDir = file("${webServicesBuilderRootPath}")

    dependsOn npmWebServicesBuilderInstall
    mustRunAfter npmWebServicesBuilderInstall

    outputs.upToDateWhen { false }
    outputs.dir('build')

    args = ["run", "build"]
}

task copyWebServicesBuilderWebapp(type: Copy) {
    group = 'com.axelor.addons'
    description = 'Copy into webapp'

    dependsOn npmWebServicesBuilderBuild
    mustRunAfter npmWebServicesBuilderBuild

    destinationDir = file(rootProject.buildDir)
    into("webapp/ws-builder") {
        from "${webServicesBuilderBuildPath}"
    }
}

rootProject.tasks.named("clean") {
    delete "${webServicesBuilderBuildPath}"
    delete "${webServicesBuilderRootPath}/node_modules"
    delete "${webServicesBuilderRootPath}/yarn.lock"
    delete "${webServicesBuilderRootPath}/package_lock.json"
}

rootProject.tasks.named("war") {
    dependsOn copyWebServicesBuilderWebapp
    mustRunAfter copyWebServicesBuilderWebapp
}

rootProject.tasks.named("compileJava") {
    dependsOn copyWebServicesBuilderWebapp
    mustRunAfter copyWebServicesBuilderWebapp
}

rootProject.tasks.named("processResources") {
    dependsOn copyWebServicesBuilderWebapp
    mustRunAfter copyWebServicesBuilderWebapp
}