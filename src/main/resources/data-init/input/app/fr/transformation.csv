"importId";"description";"groovy_template","name";"library";"multi_arg";"multi_arg_type"
"";"Trim whitespace or other characters from the right return the result. The mask text can be any string of text.";"{target -> if (#{mask} == "\\u0020"){ return target.replaceAll("(^.*[^ ]+) *\$", '\$1'); }else{ return target.replaceAll( "(.*)"+#{mask}+"\$", "\$1"); } }(#{target})";"right_trim";"1";"false";;"";
"";"Trim whitespace or other characters from both sides and return the result. The mask text can be any string of text.";"{target -> if (#{mask} == "\\u0020"){ return target.replaceAll("^ *([^ ].*[^ ]) *\$", '\$1'); }else{ return target.replaceAll( "^"+#{mask}+"(.*)"+#{mask}+"\$", "\$1");}}(#{target})";"trim";"1";"false";""
"";"Perform a regular expression search and replace on the target text.";"{target -> target.replaceAll(#{regex}, #{replacement})}(#{target})";"regex_replace";"1";"false";""
"";"Replace a text phrase with another. Search can be any word in the value and the replacement can be anything.";"{target -> target.replace(#{search}, #{replacement})}(#{target})";"replace";"1";"false";""
"";"Formats text with variable substitution. %s is used to replace text.";"{target -> String.format(target, #{_multiArg_})}(#{target})";"format_string";"1";"true";"String"
"";"Returns whether or not the expression is present at the end. The search term can be any string of text. This transformation returns a "true" or "false" response.";"{target -> target.endsWith(#{search})} (#{target})";"ends_width";"1";"false";"String"
"";"Returns the number of characters of a string.";"{target -> target.length()}(#{target})";"string_length";"1";"false";""
"";"Returns whether or not the expression is found and is case-sensitive. The search term can be any string of text. This returns a "true" or "false" response.";"{target -> target.contains(#{search})}(#{target})";"contains";"1";"false";""
"";"Concatenates target value with value together by an optional separator. The value can be any text and the separator can be anything: + , -, _, a space, etc...";"{target-> target+#{separator}+#{value}}(#{target})";"concat";"1";"";""
"";"Converts the first letter of each word to a capital letter";"{target -> target.capitalize()}(#{target})";"capitalize";"1";"";""
"";"Returns whether or not the case-insensitive expression is found. The search term can be any string of text.This returns a "true" or "false" response.";"{ target -> target.toLowerCase().contains(#{search}.toLowerCase()) }(#{target})";"ci_contains";"1";"false"
"";"Returns the index of the case-sensitive expression or false if it can't be found.  The search term can be any string of text.returns an integer value of where the character(s) exist in the string.";"{ target -> target.indexOf(#{search}) }(#{target})";"index";"1";"false";""
"";"Returns the index of the case-insensitive expression or false if it can't be found. The search term can be any string of text.Returns an integer value of where the character(s) exist in the string.";"{ target -> target.toLowerCase().indexOf(#{search}.toLowerCase()) }(#{target})";"ci_index";"1";"false";""
"";"Returns whether or not the case-insensitive expression is present at the end. The search term can be any text string. This returns a "true" or "false" answer.";"{ target -> target.toLowerCase().endsWith(#{search}.toLowerCase())}(#{target})";"ci_ends_width";"1";"false";""
"";"Returns whether or not the case-insensitive expression is present at the beginning. The search term can be any string of text.This returns a "true" or "false" response.";"{ target -> target.toLowerCase().startsWith(#{search}.toLowerCase()) }(#{target})";"ci_starts_with";"1";"false";""
"";"Returns whether or not the expression is present at the beginning.  The search term can be any string of text and is case-sensitive.This returns a "true" or "false" response.";"{ target -> target.startsWith(#{search}) }(#{target})";"starts_with";"1";"false";""
"";"Extracts a sub-string of text. the start index character is included but the end index character is not";"{target -> if (end == "null") return target.substring(#{start}); else return target.substring(#{start}, #{end})}(#{target})";"1";"false";""
"";"Converts all characters to lower case and returns the result";"{target -> target.toLowerCase()}(#{target})";"to_lower";"1";"false";""
"";"Converts all characters to upper case and returns the result";"{target -> target.toUpperCase()}(#{target})";"to_upper";"1";"false";""
"";"Trim whitespace or other characters from the left side and return the result. The mask text can be any string of text.";"{target -> if (#{mask} == "\\u0020"){ return target.replaceAll("^ *([^ ]+.*)", '\$1'); }else{ return target.replaceAll( "^"+#{mask}+"(.*)", "\$1"); } }(#{target})";"left_trim";"1";"false";""
"";"Returns the absolute value. The absolute value of the number is the positive equivalent.";"{target-> Math.abs(target)}(#{target})";"abs";"1";"";""
"";"Calculates the arc cosine of the given value in radians";"{target-> Math.acos(target)}(#{target})";"acos";"3";"";""
"";"Convert radians to degrees";"{target-> Math.toDegrees(target)}(#{target})";"radToDegree";"3";"";""
"";"Modulus 2 values together and return the result, The modulus is the remainder after dividing one number by another.";"{target-> target.mod(#{value})}(#{target})";"modulo";"3";"";""
"";"Multiplies 2 values together and returns the result.";"{target-> target*#{value}}(#{target})";"multiply";"3";"";""
"";"Round fractions down to their integer equivalent.";"{target-> Math.round(target)}(#{target})";"floor";"3";"";""
"";"Convert the given value from degrees  to radians";"{target-> Math.toRadians(target)}(#{target})";"degToRad";"3";"";""
"";"Calculates the cosine of the given value in radians";"{target-> Math.cos(target)}(#{target})";"cos";"3;"";""
"";"Round fractions up to their integer equivalent.";"{target-> Math.round(target) +1}(#{target})";"ciel";"3";"";""
"";"Calculates the inverse hyperbolic tangent of the given value in radians.";"{target-> Math.atanh(target)}(#{target})";"atanh";"3";"";""
"";"Calculates the arc tangent of the given value in radians.";"{target-> Math.atan(target)}(#{target})";"atan";"3";"";""
"";"Calculates the inverse hyperbolic sine of the given value in radians.";"{target-> Math.asinh(target)}(#{target})";"asinh";"3";"";""
"";"Calculates the arc sine of the given value in radians.";"{target-> Math.asin(target)}(#{target})";"asin";"3";"";""
"";"Returns the target value raised to the power of the exponent.";"{target-> Math.pow(target, #{exp})}(#{target})";"pow";"";""
"";"Divides 2 values together and returns the result.";"{target-> target/#{value}}(#{target})";"divide";"3";"";""
"";"Adds 2 values together and returns the result.";"{target-> target+#{value}}(#{target})";"add";"3";"";""
"";"Calculates the inverse hyperbolic cosine of the supplied value in radians.";"{target-> Math.acosh(target)}(#{target})";"acosh";"3";"";""
"";"Subtract days from the given date.";"{target -> Date.parse("MM/dd/yyyy", target).plus((-1)*#{days})}(#{target})";"minus_days";"2";"false;""
"";"Add days to the given date.";"{target -> Date.parse("MM/dd/yyyy", target).plus(#{days})}(#{target})";"plus_days";"2";"false";""
"";"Add months to the given date.";"{target -> Date.parse("MM/dd/yyyy", target).plus(30*#{months})}(#{target})";"plus_months";"2";"false";""
"";"Subtract months from the given date.";"{target -> Date.parse("MM/dd/yyyy", target).plus((-30)*#{months})}(#{target})";"subtract_months";"2";"false";""
"";"Add years to the given date.";"{target -> Date.parse("MM/dd/yyyy", target).plus((30*12)*#{years})}(#{target})";"plus_years";"2";"false";""
"";"Subtract years from the given date.";"{target -> Date.parse("MM/dd/yyyy", target).plus((-30*12)*#{years})}(#{target})";"subtract_years";"2";"false";""
"";"Get the month of the year";"{target -> Date.parse("MM/dd/yyyy", target).format("MMMM")}(#{target})";"get_month";"2";"false";""
"";"Get day of the month";"{target -> Date.parse("MM/dd/yyyy", target).format("EEEE")}(#{target})";"get_day";"2";"false";""
"";"Format the given date according to the given format pattern";"{target -> Date.parse("MM/dd/yyyy", target).format(#{format})}(#{target})";"date_format";"2";"false";""
"";"";"{target -> target.addAll(#{value},#{_multiArg_}) ;return target}(#{target})";"push";"4";"true";"String"

